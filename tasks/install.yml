---
- name: Install unzip
  package:
    name: unzip
    state: latest
  tags:
    - skip_ansible_lint  # latest

# From https://github.com/azavea/ansible-terraform/blob/develop/tasks/main.yml
- name: Check terraform version
  shell: "/usr/local/bin/terraform --version | head -n1 | grep {{ terraform_version }}"
  failed_when: False
  changed_when: False
  register: current_terraform_version

- name: debug
  debug:
    msg: "{{ current_terraform_version, current_terraform_version.stdout, current_terraform_version.rc }}"

- name: Download terraform
  get_url:
    url: 'https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip'
    dest: /usr/local/bin/
    mode: 0555
    checksum: '{{ terraform_checksum }}'
  when: current_terraform_version.rc != 0

- name: Unzip and install terraform
  unarchive:
    src: /usr/local/bin/terraform_{{ terraform_version }}_linux_amd64.zip
    dest: /usr/local/bin/
    remote_src: True
  when: current_terraform_version.rc != 0

- name: Check terragrunt version
  shell: "/usr/local/bin/terragrunt --version | head -n1 | grep {{ terragrunt_version }}"
  failed_when: False
  changed_when: False
  register: current_terragrunt_version

- name: Download and install terragrunt
  get_url:
    url: 'https://github.com/gruntwork-io/terragrunt/releases/download/v{{ terragrunt_version }}/terragrunt_linux_amd64'
    dest: /usr/local/bin/terragrunt
    mode: 0555
    force: yes
  when: current_terragrunt_version.rc != 0

- name: Check jq version
  shell: "/usr/local/bin/jq --version | head -n1 | grep {{ jq_version }}"
  failed_when: False
  changed_when: False
  register: current_jq_version

- name: Download and install jq
  get_url:
    url: 'https://github.com/stedolan/jq/releases/download/jq-{{ jq_version }}/jq-linux64'
    dest: /usr/local/bin/jq
    mode: 0555
    force: yes
  when: current_jq_version.rc != 0

- name: Check for rvm gpg key
  command: gpg --list-keys
  become: true
  become_user: gitlab-runner
  register: gpg_list_keys
  changed_when: false

- name: Import rvm gpg key
  # Based on install instructions from https://rvm.io/
  command: gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
  become: true
  become_user: gitlab-runner
  when: gpg_list_keys.stdout.find('Michal Papis (RVM signing) <mpapis@gmail.com>') == -1

- name: Check for rvm installation
  stat:
    path: ~gitlab-runner/.rvm/bin/rvm
  register: rvm_exists

- name: Download rvm installer
  get_url:
    url: 'https://get.rvm.io'
    dest: /tmp/rvm_installer.bash
    mode: 0555
  become: true
  become_user: gitlab-runner
  when: rvm_exists.stat.exists == False

- name: Install rvm
  command: /tmp/rvm_installer.bash stable
  become: true
  become_user: gitlab-runner
  when: rvm_exists.stat.exists == False

- name: Check for ruby installation
  stat:
    path: ~gitlab-runner/.rvm/rubies/ruby-{{ ruby_version }}/bin/ruby
  register: ruby_exists

- name: Install ruby prerequisites
  command: ~gitlab-runner/.rvm/bin/rvm requirements {{ ruby_version }}
  when: ruby_exists.stat.exists == False

- name: Install ruby with rvm
  # We install rvm locally for the gitlab-runner user only (see
  # https://issues.gpii.net/browse/GPII-2389?focusedCommentId=26403&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-26403)
  #
  # This means we need to use the gitlab-runner user's local dotfiles. That's
  # sort of tricky with ansible. This explicit call to "sudo -i" is a
  # workaround (see https://stackoverflow.com/a/32030344 and/or
  # https://github.com/ansible/ansible/issues/4854#issuecomment-39284921).
  command: sudo -i -u gitlab-runner rvm install {{ ruby_version }}
  when: ruby_exists.stat.exists == False

- name: Check for bundler installation
  stat:
    path: ~gitlab-runner/.rvm/gems/ruby-{{ ruby_version }}/bin/bundle
  register: bundler_exists

- name: Install bundler with rvm
  command: sudo -i -u gitlab-runner gem install bundler
  when: bundler_exists.stat.exists == False
